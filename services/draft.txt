exports.getUserAnswersReportTotal = asyncHandler(async (req, res) => {
  try {
    const { userId } = req.params;
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    //check if user took the two exam
    if (!user.retakeQuizAt && user.quizStatus !== "finished") {
      return res
        .status(404)
        .json({ message: "عليك ب اكمال الاختبارين لتحصل علي التقرير الشامل" });
    }

    // Find all keys
    const keys = await Key.find({ _id: { $in: user.allowed_keys } });
    if (keys.length === 0) {
      return res
        .status(404)
        .json({
          status: "failed",
          message: "المفاتيح المتاحه للمستخدم غير موجوده",
        });
    }

    // Initialize an array to store the results for all keys and questions
    const results = [];
    // Iterate over each key
    for (const key of keys) {
      let firstAnsRaters = 0;
      let secondAnsRaters = 0;
      // Find all questions for the current key
      const questions = await Questions.find({ section: key._id });
      if (!questions) {
        continue;
      }
      // Find the user's answers for the current key
      const userAnswers = await Answer.find({
        userId: userId,
        "userAnswer.questionId": { $in: questions.map((q) => q._id) },
      });

      // Create a map to store the average raters' answers for each question
      const averageRaterAnswers = {};

      // Initialize the averageRaterAnswers map
      questions.forEach((question) => {
        averageRaterAnswers[question._id] = {
          before: 0,
          after: 0,
        };
      });

      //------------------------------------------------------------------------------

      if (userAnswers[0].raters) {
        userAnswers[0].raters.forEach((rater) => {
          rater.answers.forEach((ans) => {
            const questionId = ans.questionId.toString();
            if (!averageRaterAnswers[questionId]) {
              // Ensure initialization
              averageRaterAnswers[questionId] = { before: 0, after: 0 };
            }
            averageRaterAnswers[questionId].before += ans.answer;
          });
        });

        // Only proceed with this block if the first set of answers has raters
        firstAnsRaters = userAnswers[0].raters.filter(
          (rater) => rater.answers.length !== 0
        );

        questions.forEach((question) => {
          const questionId = question._id.toString();
          if (firstAnsRaters.length) {
            // Avoid division by zero
            averageRaterAnswers[questionId].before /= firstAnsRaters.length;
          }
        });
      }

      //--------------------------------------------------------------------------------
      // Repeat the process for the second set of rater answers, if available
      if (userAnswers[1].raters) {
        userAnswers[1].raters.forEach((rater) => {
          rater.answers.forEach((ans) => {
            const questionId = ans.questionId.toString();
            averageRaterAnswers[questionId].after += ans.answer;
          });
        });

        secondAnsRaters = userAnswers[1].raters.filter(
          (rater) => rater.answers.length !== 0
        );

        questions.forEach((question) => {
          averageRaterAnswers[question._id].after /=
            secondAnsRaters.length || 1; // Avoid division by zero
        });
      }
      //--------------------------------------------------------------------------------

      // Calculate the differences for each question and the total difference for the key
      const keyResult = questions.map((question) => {
        const questionId = question._id.toString();
        const userAnswerBefore = userAnswers[0]?.userAnswer.find((ans) =>
          ans.questionId.equals(question._id)
        );
        const userAnswerAfter = userAnswers[1]?.userAnswer.find((ans) =>
          ans.questionId.equals(question._id)
        );

        // Calculate differences
        const userDiff = userAnswerAfter
          ? userAnswerAfter.answer - userAnswerBefore.answer
          : null;
        const ratersDiff =
          averageRaterAnswers[questionId].after -
          averageRaterAnswers[questionId].before;

        return {
          question: question.text,
          before: {
            user: userAnswerBefore ? userAnswerBefore.answer : null,
            raters: Number(averageRaterAnswers[questionId].before.toFixed(2)), //will be 0 if no rater answered
          },
          after: {
            user: userAnswerAfter ? userAnswerAfter.answer : null,
            raters: Number(averageRaterAnswers[questionId].after.toFixed(2)), //will be 0 if no rater answered
          },
          avg: {
            user: Number(userDiff.toFixed(2)),
            raters: Number(ratersDiff.toFixed(2)),
          },
        };
      });

      // Calculate the total differences for user and raters across all questions
      const totalDifference = keyResult.reduce(
        (total, question) => {
          if (question.avg.user !== null) {
            total.user += Number(question.avg.user);
          }
          if (question.avg.raters !== null) {
            total.raters += Number(question.avg.raters);
          }
          return total;
        },
        { user: 0, raters: 0 }
      );

      // Calculate the graph section for this key
      const graph = {
        userBefore:
          keyResult.reduce((total, question) => {
            if (question.before.user !== null) {
              total += question.before.user;
            }
            return total;
          }, 0) / questions.length,
        userAfter:
          keyResult.reduce((total, question) => {
            if (question.after.user !== null) {
              total += question.after.user;
            }
            return total;
          }, 0) / questions.length,
        raterBefore:
          keyResult.reduce((total, question) => {
            total += question.before.raters;
            return total;
          }, 0) / questions.length,
        raterAfter:
          keyResult.reduce((total, question) => {
            total += question.after.raters;
            return total;
          }, 0) / questions.length,
      };

      results.push({
        key: key.name, // You can use any key identifier here
        ratersBefore: firstAnsRaters.length,
        ratersAfter: secondAnsRaters.length,
        desc: key.desc ? key.desc : null,
        questions: keyResult,
        graph: graph,
        totalDifference: totalDifference,
      });
    }

    return res.status(200).json(results);
  } catch (error) {
    console.error("Error: ", error.message);

    return res.status(400).json({
      status: "failed",
      msg: error.message,
      msg2: "User should take the quiz twice, and all raters should submit their answers in both times",
    });
  }
});